---
import type { CollectionEntry } from "astro:content";
import { fnv_1a } from '../../lib/fnv32'

interface Props {
  questions: CollectionEntry<"questions">[];
}

const { questions } = Astro.props;

import { createHash } from "node:crypto"

const systemColours = [
  "lightpink",
  "blueviolet",
  "fuchsia",
  "indigo",
  "darkviolet",
  "mediumvioletred",
  "salmon",
  "plum",
  "tomato",
  "orange",
  "darkkhaki",
  "royalblue",
  "deepskyblue",
  "lightseagreen",
  "turquoise",
  "chocolate",
  "brown",
  "goldenrod",
  "burlywood",
];
---

<ul>
  {
    questions.sort((a, b) => {
      const nameA = a.data.title.toLowerCase();
      const nameB = b.data.title.toLowerCase();
      if (nameA < nameB) {
        return -1;
      }
      if (nameA > nameB) {
        return 1;
      }
      return 0;
    }).map((q) => {
      const tags = q.data.tags.map(t => {
        const hash = fnv_1a(t)
        // Hash each tag and reduce it down to just numbers
        // const hash = createHash("sha256").update(t).digest("hex").replace(/[a-zA-Z]+/g, '')
        // Modulo hash to fit within list of colours
        const i = Number(hash) % systemColours.length
        return (
          <span style={`color: ${systemColours[i]}`}>#{t}</span>
        )
      })
      return (
        <li id={q.slug} class="question">
          <a href={`/${q.collection}/${q.slug}`}>{q.data.title}</a>
          {tags}
        </li>
      );
    })
  }
  <!-- {{ range sort .Pages "Lastmod" "desc" }}
    <li id="{{ .Slug }}" class="question">
      <a href="{{ .RelPermalink }}">{{ .Title }}</a>
      {{ range .Params.tags }}
        {{ $hash := (crypto.FNV32a .) }}
        {{ $i := mod $hash (len $systemColors) }}
        <span style="color: {{ index $systemColors $i }}">#{{ . }}</span>
      {{ end }}
    </li>
    {{ end }} -->
</ul>
