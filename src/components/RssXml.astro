---
import type { MDXInstance } from 'astro';
import { SITE_TITLE, SITE_DESCRIPTION, SITE_URL } from '../consts';
import path from 'path';

import { dateToRfc822 } from "../utils/rfc822"

const allPosts: MDXInstance<Record<string, any>>[] = await Astro.glob('../content/blog/**/*.mdx');

const processedPosts = allPosts
  .sort((a, b) => (a.frontmatter.date > b.frontmatter.date ? 1 : a < b ? -1 : 0))
  .reverse()

const rssHeaderXml = `<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>${SITE_TITLE}</title>
    <description><![CDATA[ ${SITE_DESCRIPTION} ]]></description>
    <link>${SITE_URL}</link>
    <managingEditor>marcus@utf9k.net (Marcus Crane)</managingEditor>
    <webMaster>marcus@utf9k.net (Marcus Crane)</webMaster>
    <docs>https://www.rssboard.org/rss-specification</docs>`;

const rssFooterXml = `  </channel>
  </rss>
  `;
---
<Fragment set:html={rssHeaderXml} />
{processedPosts.map(post =>
  <Fragment set:html={`
    <item>
      <title>${post.frontmatter.title.replace('&', '&amp;')}</title>
      <link>${new URL(
        path.join("/", post.frontmatter.category, post.frontmatter.slug),
        SITE_URL
      )}</link>
      <guid>${new URL(
        path.join("/", post.frontmatter.category, post.frontmatter.slug),
        SITE_URL
      )}</guid>
      <description><![CDATA[ ${post.frontmatter.description}]]></description>
      <pubDate>${dateToRfc822(post.frontmatter.date)}</pubDate>
      <content:encoded><![CDATA[`} />
      <post.Content/>
    <Fragment set:html={`]]></content:encoded>
    </item>`} />)}
<Fragment set:html={rssFooterXml} />