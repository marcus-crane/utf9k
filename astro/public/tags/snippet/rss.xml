<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>utf9k</title>
    <link>https://utf9k.net/tags/snippet/</link>
    <description>Posts from utf9k</description>
    <language>en</language>
    <author>
      <name>Marcus Crane</name>
      <email>marcus@utf9k.net</email>
    </author>
    <lastBuildDate>Wed, 12 Dec 2018 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://utf9k.net/tags/snippet/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recovering lost Python results in the REPL</title>
      <link>https://utf9k.net/blog/lost-python-results/</link>
      <description>Did you know that Python stores the previous output as a hidden variable?</description>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/lost-python-results/</guid>
      <content type="html">&lt;p&gt;I was messing around with some queuing earlier today in order to try out the &lt;a href=&#34;https://github.com/celery/kombu&#34;&gt;Kombu&lt;/a&gt; library. It works pretty nicely but I goofed up while playing with it.&lt;/p&gt;
&lt;p&gt;To add a message to a queue, it looks a little like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; kombu &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Connection, Queue
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Connection() &lt;span style=&#34;color:#6272a4&#34;&gt;# Defaults to a RabbitMQ Docker container I have running locally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SimpleQueue(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;put(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;this is a message i want to put on the queue&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may want to use a context manager instead but for a simple test, this works fine. Now then, how about getting a message off the queue? It&amp;rsquo;s straight forward as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &amp;lt;Message object at 0x110a844c8 with details {&amp;#39;state&amp;#39;: &amp;#39;RECEIVED&amp;#39;, &amp;#39;content_type&amp;#39;: &amp;#39;text/plain&amp;#39;, &amp;#39;delivery_tag&amp;#39;: 1, &amp;#39;body_length&amp;#39;: 5, &amp;#39;properties&amp;#39;: {}, &amp;#39;delivery_info&amp;#39;: {&amp;#39;exchange&amp;#39;: &amp;#39;test&amp;#39;, &amp;#39;routing_key&amp;#39;: &amp;#39;test&amp;#39;}}&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cool, we&amp;rsquo;ve received a message now so next we need to acknowledge it with the ack functionâ€¦&lt;/p&gt;
&lt;p&gt;Wait a minute, we forgot to save that message to a variable so how the hell can we acknowledge it?! Damn, it&amp;rsquo;s totally just lost in memory, huh?&lt;/p&gt;
&lt;p&gt;This is a scenario I ran into and it got me wondering: Is it possible to retrieve a Python object by that hex/memory address? Well, it turns out that you can&amp;rsquo;t. I haven&amp;rsquo;t done a deep dive yet but if it&amp;rsquo;s a continuously running application, it may soon exit memory and be lost forever.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re just running in the Python REPL however, there is actually a way: The handy &lt;code&gt;_&lt;/code&gt; operator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &amp;lt;Message object at 0x110a844c8 with details {&amp;#39;state&amp;#39;: &amp;#39;RECEIVED&amp;#39;, &amp;#39;content_type&amp;#39;: &amp;#39;text/plain&amp;#39;, &amp;#39;delivery_tag&amp;#39;: 1, &amp;#39;body_length&amp;#39;: 5, &amp;#39;properties&amp;#39;: {}, &amp;#39;delivery_info&amp;#39;: {&amp;#39;exchange&amp;#39;: &amp;#39;test&amp;#39;, &amp;#39;routing_key&amp;#39;: &amp;#39;test&amp;#39;}}&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ack()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &amp;lt;Message object at 0x110a844c8 with details {&amp;#39;state&amp;#39;: &amp;#39;ACK&amp;#39;, &amp;#39;content_type&amp;#39;: &amp;#39;text/plain&amp;#39;, &amp;#39;delivery_tag&amp;#39;: 1, &amp;#39;body_length&amp;#39;: 5, &amp;#39;properties&amp;#39;: {}, &amp;#39;delivery_info&amp;#39;: {&amp;#39;exchange&amp;#39;: &amp;#39;test&amp;#39;, &amp;#39;routing_key&amp;#39;: &amp;#39;test&amp;#39;}}&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(message)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &amp;lt;Message object at 0x110a844c8 with details {&amp;#39;state&amp;#39;: &amp;#39;ACK&amp;#39;, &amp;#39;content_type&amp;#39;: &amp;#39;text/plain&amp;#39;, &amp;#39;delivery_tag&amp;#39;: 1, &amp;#39;body_length&amp;#39;: 5, &amp;#39;properties&amp;#39;: {}, &amp;#39;delivery_info&amp;#39;: {&amp;#39;exchange&amp;#39;: &amp;#39;test&amp;#39;, &amp;#39;routing_key&amp;#39;: &amp;#39;test&amp;#39;}}&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the interpreter actually binds the last result to the &lt;code&gt;_&lt;/code&gt; character. If you were to do &lt;code&gt;1 + 1&lt;/code&gt;, the value of &lt;code&gt;_&lt;/code&gt; would be 2! You can also bind the value to a variable for use later on.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think I&amp;rsquo;d need it often but it&amp;rsquo;s very handy to know.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
