<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>utf9k</title>
    <link>https://utf9k.net/tags/linux/</link>
    <description>Posts from utf9k</description>
    <language>en</language>
    <author>
      <name>Marcus Crane</name>
      <email>marcus@utf9k.net</email>
    </author>
    <lastBuildDate>Wed, 06 May 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://utf9k.net/tags/linux/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up Emacs inside of a WSL2 distribution</title>
      <link>https://utf9k.net/blog/emacs-wsl2-install/</link>
      <description>As if life wasn&#39;t already hard enough, we can add more Windows into the mix</description>
      <pubDate>Wed, 06 May 2020 00:00:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/emacs-wsl2-install/</guid>
      <content type="html">&lt;p&gt;I&amp;rsquo;ve never really dedicated myself to Emacs despite being interested in &lt;a href=&#34;https://orgmode.org/&#34;&gt;org mode&lt;/a&gt; for a little while now.&lt;/p&gt;
&lt;p&gt;One barrier to entry is that I had no idea how to install it on my desktop. The more places I have it installed, the quicker I can get comfortable enough to actually use it in my day to day life.&lt;/p&gt;
&lt;p&gt;In particular, I&amp;rsquo;m trying out &lt;a href=&#34;https://github.com/hlissner/doom-emacs&#34;&gt;Doom Emacs&lt;/a&gt;, a lightweight configuration that uses vim-style bindings.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not much of a Vimmer either for the record. I&amp;rsquo;m fairly comfortable opening it up, moving around with H-J-K-L and editing here and there but I&amp;rsquo;m not much more productive than that.&lt;/p&gt;
&lt;p&gt;Anyway, here&amp;rsquo;s a short guide on how you too can get Emacs up and running on Version 2 of the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/about&#34;&gt;Windows for Linux subsystem&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;an-optional-prerequisite&#34;&gt;An optional prerequisite&lt;/h2&gt;&lt;p&gt;Currently, I&amp;rsquo;m using &lt;a href=&#34;https://x410.dev/&#34;&gt;X410&lt;/a&gt;, an &lt;a href=&#34;https://en.wikipedia.org/wiki/X_Window_System&#34;&gt;X Window System&lt;/a&gt; for Windows.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not hugely familiar with X or Windowing systems, it&amp;rsquo;s basically just a way of displaying applications outside of a terminal.&lt;/p&gt;
&lt;p&gt;In our case, while Emacs renders perfectly fine in the terminal, I like to have it render in its own window, which is what a windowing system provides more or less.&lt;/p&gt;
&lt;p&gt;There are plenty of other X servers for Windows but I found this one to be pretty seamless. &lt;a href=&#34;https://sourceforge.net/projects/vcxsrv/&#34;&gt;VcXsrv&lt;/a&gt; is another popular alternative, although I had some configuration troubles getting it working.&lt;/p&gt;
&lt;p&gt;That said, I&amp;rsquo;ve done some fiddling and have provided a setup guide for it as well!&lt;/p&gt;
&lt;p&gt;Before we get started, feel free to skip the entire window manager portion if you&amp;rsquo;re comfortable with, or prefer, running Emacs in your terminal of course.&lt;/p&gt;

&lt;h2 id=&#34;the-paid-but-pretty-seamless-way&#34;&gt;The paid, but pretty seamless way&lt;/h2&gt;&lt;p&gt;I should stress that while I&amp;rsquo;ve opted to purchase an X server that has some extra bits and pieces, you can use an open source, unpaid alternative.&lt;/p&gt;
&lt;p&gt;X410 had some decent recommendations for being an easy setup, and happened to be under a very steep discount so I figured I&amp;rsquo;d give it a spin. I also ran into some issues with VcXsrv originally as well.&lt;/p&gt;
&lt;p&gt;You can find it &lt;a href=&#34;https://www.microsoft.com/store/productId/9NLP712ZMN9Q&#34;&gt;in the Windows Store&lt;/a&gt; , presumably for any region. It&amp;rsquo;ll require a Microsoft account to purchase which can be a little annoying if you don&amp;rsquo;t already have one.&lt;/p&gt;
&lt;p&gt;The installation should be straight forward and I don&amp;rsquo;t remember any flags that require toggling.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve got it installed, fire it up and you should see a silver X icon in your Windows task tray, in the bottom right of your screen.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need to click on it (left or right, it makes no difference) and select &amp;ldquo;Allow Public Access&amp;rdquo;. See the end of this section for a note on security.&lt;/p&gt;
&lt;p&gt;While the original WSL1 exposes things on &lt;code&gt;http://localhost&lt;/code&gt; (from memory anyway), WSL2 is treated like a network storage.&lt;/p&gt;
&lt;p&gt;This means that our Linux distribution is effectively its own &amp;ldquo;computer&amp;rdquo; with its own IP address, and so firewall policies come into place, and so on.&lt;/p&gt;
&lt;p&gt;When we connect to our X server, it&amp;rsquo;ll be on an internal address such as 172.x.x.x rather than 127.0.0.1.&lt;/p&gt;
&lt;p&gt;Beyond that, we should be good to go! You can either read the alternative setup or skip on down to configuring your &lt;code&gt;DISPLAY&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;Upon closer inspection, it seems that &amp;ldquo;Allow public access&amp;rdquo; does indeed do what it says on the tin.&lt;/p&gt;
&lt;p&gt;I can confirm that I was able to forward an emacs session from my work laptop to my home desktop without any prompting. The same should hold true of any other random person on your network.&lt;/p&gt;
&lt;p&gt;If you trust your network, and aren&amp;rsquo;t proxying your computer to the internet or something interesting like that, you should be fine. In that case, feel free to jump down to the environment configuration section.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d sleep safer at night with some tighter restrictions, feel free to follow the Windows Firewall configuration steps I&amp;rsquo;ve suggested below, under the setup for VcXsrv. They should apply exactly the same, but to the firewall rule for &lt;code&gt;x410&lt;/code&gt; .&lt;/p&gt;

&lt;h2 id=&#34;the-free-open-source-slightly-more-involved-way&#34;&gt;The free, open source, slightly more involved way&lt;/h2&gt;&lt;p&gt;For those of you who prefer to be able to either not pay for your software, or audit it, you&amp;rsquo;ll want to pick up a copy of &lt;a href=&#34;https://sourceforge.net/projects/vcxsrv/files/vcxsrv/&#34;&gt;VcXsrv&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a little more involved but not much more. I&amp;rsquo;ve gone through the gauntlet and figured out some settings that seem to work consistently while still staying relatively secure. That said, feel free to let me know since Windows Firewall isn&amp;rsquo;t an area I tend to stray into often.&lt;/p&gt;
&lt;p&gt;Go ahead and install &lt;code&gt;VcXsrv&lt;/code&gt; and then once that&amp;rsquo;s done, open up your start menu and search for &lt;code&gt;XLaunch&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If you run it, it should prompt you for some default settings. You can leave it set to the default (Multiple windows with the display number set to -1 for auto)&lt;/p&gt;
&lt;p&gt;Extra settings should stay as the default.&lt;/p&gt;
&lt;p&gt;You should get to a panel for extra parameters however, and when you do, you&amp;rsquo;ll want to add &lt;code&gt;-ac&lt;/code&gt; as a flag. Without it, you&amp;rsquo;ll have some trouble down the line.&lt;/p&gt;
&lt;p&gt;Upon finishing up this configuration, you should get a popup from Windows Defender Firewall. You can click Allow but we&amp;rsquo;ll also do some further configuration next.&lt;/p&gt;
&lt;p&gt;So, with XLaunch all wrapped up, head to your start menu once again and search for &amp;ldquo;Windows Defender Firewall with Advanced Security&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Open it up, click &lt;code&gt;Inbound Rules&lt;/code&gt; and then scroll down until you find &lt;code&gt;VcXsrv windows server&lt;/code&gt; . You&amp;rsquo;ll likely have about 4 entries, with two for TCP connections and another two for UDP connections.&lt;/p&gt;
&lt;p&gt;Personally, I&amp;rsquo;ve opted to delete all of them except for one since I don&amp;rsquo;t plan to keep a UDP configuration, nor do I need two types of TCP setup but you can leave them if you like.&lt;/p&gt;
&lt;p&gt;You can either double click, or right click and hit properties, to start modifying your firewall rule.&lt;/p&gt;
&lt;p&gt;First, under General, change the action to &lt;code&gt;Allow the connection&lt;/code&gt; if it&amp;rsquo;s not already set as such.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry, we&amp;rsquo;ll be scoping down the permissions quite a bit. Well, as much as I could figure out how to anyway. I already did more fiddling here, for the sake of this post, than I probably would otherwise.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t want to allow just anyone to connect to our display server so under the &lt;code&gt;Scope&lt;/code&gt; tab, I&amp;rsquo;ve added an IP address range.&lt;/p&gt;
&lt;p&gt;Under &lt;code&gt;Local IP Address&lt;/code&gt; , select &lt;code&gt;These IP addresses&lt;/code&gt; , click &lt;code&gt;Add&lt;/code&gt; -&amp;gt; &lt;code&gt;This IP address range&lt;/code&gt; and then enter the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From: 172.16.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To  : 172.31.255.255
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given that the Windows subsystem is treated like a network device of sorts, our display server will essentially be receiving a connection from a different computer, as far as it&amp;rsquo;s concerned.&lt;/p&gt;
&lt;p&gt;In order to mitigate any actual other computers connecting, we&amp;rsquo;re narrowing down the acceptable list of IP addresses to just those that fall within the WSL range.&lt;/p&gt;
&lt;p&gt;I suppose if you did have a big internal network, with a computer assigned an address on 172.16.x.x, then they could connect but we&amp;rsquo;ll be doing some interface restrictions just below.&lt;/p&gt;
&lt;p&gt;Anyway, repeat the same steps for &lt;code&gt;Remote IP address&lt;/code&gt; and then hit &lt;code&gt;Apply your changes&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;At this point, what I wanted to do was reduce the scope of the &lt;code&gt;Protocols&lt;/code&gt; tab to just TCP on the ports that X server uses (6000 - 6063) but I had no such luck.&lt;/p&gt;
&lt;p&gt;It potentially be the case that somewhere between WSL land and your host computer, some ports are proxied to be higher or lower, but honestly, I&amp;rsquo;m purely speculating based on no actual evidence.&lt;/p&gt;
&lt;p&gt;For the interested, the above protocol and port restriction causes the host X server to be unreachable. If you extend the range from 6000 to the highest possible port (65535), it does indeed connect which is why it seems it&amp;rsquo;s relying on a range of ports higher than those 63 to be reachable.&lt;/p&gt;
&lt;p&gt;Anyway, enough sidetracking. There is one extra bit of restricting we can do. Under &lt;code&gt;Protocols and Ports&lt;/code&gt; -&amp;gt; &lt;code&gt;Protocol type&lt;/code&gt; , change it to just allow &lt;code&gt;TCP&lt;/code&gt; . You can then navigate to &lt;code&gt;Advanced&lt;/code&gt; -&amp;gt; &lt;code&gt;Interface types&lt;/code&gt; -&amp;gt; &lt;code&gt;Customize&lt;/code&gt; , and you should be able to narrow down the list to just &lt;code&gt;Local area network&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Presumably, even if anyone is on the wider network with an IP address that happens to match our WSL2 distro, they still won&amp;rsquo;t be able to connect but I haven&amp;rsquo;t tried this.&lt;/p&gt;
&lt;p&gt;With all of that nonsense behind us, we can get on to actually configuring our environment and testing that our setup has worked successfully!&lt;/p&gt;

&lt;h2 id=&#34;configuring-your-environment&#34;&gt;Configuring your environment&lt;/h2&gt;&lt;p&gt;As I briefly referenced in the setup steps for X410, WSL2 is treated as a network device of sorts.&lt;/p&gt;
&lt;p&gt;The exact details are besides the point here but just know that WSL2 is effectively a separate computer.&lt;/p&gt;
&lt;p&gt;What this means, is that we can&amp;rsquo;t rely on Emacs automatically knowing where to find our X display server (if you&amp;rsquo;re opting to use one)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;ll check inside of our Linux distribution, but we need to point it to our Windows host, since that&amp;rsquo;s where our X server is running.&lt;/p&gt;
&lt;p&gt;Doing so is only one step thankfully:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;DISPLAY&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;cat /etc/resolv.conf | grep nameserver | awk &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;{print $2; exit;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;:0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, easy enough but what just happened?&lt;/p&gt;
&lt;p&gt;By default, you&amp;rsquo;ll have an &lt;code&gt;/etc/resolv.conf&lt;/code&gt; generated by WSL. Here&amp;rsquo;s what mine looks like on a relatively fresh installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# [network]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# generateResolvConf = false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nameserver 172.31.96.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That IP address there, &lt;code&gt;172.31.96.1&lt;/code&gt; , is the IP address for our Window host machine. At least, from WSL&amp;rsquo;s point of view anyway.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;grep&lt;/code&gt; to get the exact line we want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;marcus@corbenik:~/code/utf9k$ cat /etc/resolv.conf | grep nameserver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nameserver 172.31.96.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then use &lt;code&gt;awk&lt;/code&gt; to get just the IP address by itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;marcus@corbenik:~/code/utf9k$ cat /etc/resolv.conf | grep nameserver | awk &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;{print $2; exit;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;172.31.96.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Voila! One IP address. What our above command ends up evaluating to, is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;DISPLAY&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;172.31.96.1:0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That IP address can change from time to time however, which is why we want to automate setting it each time.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;DISPLAY&lt;/code&gt; environment variable will go away with each new shell so make sure you put it in your shell startup!&lt;/p&gt;
&lt;p&gt;All that&amp;rsquo;s let is to check that we can connect as expected. Here&amp;rsquo;s a connection test against X410, using &lt;code&gt;nc&lt;/code&gt; (netcat)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;marcus@corbenik:~/code/utf9k$ nc -v 172.31.96.1 &lt;span style=&#34;color:#bd93f9&#34;&gt;6000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection to 172.31.96.1 &lt;span style=&#34;color:#bd93f9&#34;&gt;6000&lt;/span&gt; port &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;tcp/x11&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; succeeded!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why do we use port 6000? It&amp;rsquo;s the first in a range of ports for X window servers, which range from 6000 - 6063. If you note the &lt;code&gt;0.0&lt;/code&gt; on the end of our &lt;code&gt;DISPLAY&lt;/code&gt; variable, we&amp;rsquo;re telling it to use display 0, screen 0.&lt;/p&gt;
&lt;p&gt;If we wanted to use a different display, or perhaps having a second X server may qualify, we could connect to &lt;code&gt;&amp;lt;address&amp;gt;:1.0&lt;/code&gt; for display 1, screen 0. Under the hood, that would live on port 6001, which is the base port of 6000 added to our display number (1 in this case).&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t really know any of that until writing this so I&amp;rsquo;d encourage you to do your own research if you want to know more, or double check anything I just claimed, haha.&lt;/p&gt;

&lt;h2 id=&#34;installing-emacs&#34;&gt;Installing Emacs&lt;/h2&gt;&lt;p&gt;Now then, we need an actual Emacs distribution but don&amp;rsquo;t get too trigger happy just yet. For the most part, running &lt;code&gt;sudo apt-get install emacs&lt;/code&gt; will give you an outdated package. In reality, it&amp;rsquo;s probably Emacs 25 which is more than fine.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to run a more up to date version, you can do the following to fetch a copy of Emacs 26. If you&amp;rsquo;d like to be on the bleeding edge (and is what Doom Emacs recommends), you&amp;rsquo;ll probably need to compile Emacs 27 from source :(&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo add-apt-repository ppa:kelleyk/emacs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install emacs26
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Very nice, you should be all good to go. If you would like to use Doom Emacs as I am, you will need some extra packages which you can find more info about &lt;a href=&#34;https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#ubuntu&#34;&gt;via the handy documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you would like to run Emacs in your terminal, just simply fire up &lt;code&gt;emacs&lt;/code&gt; . If you wouldd like to run it on your Windows host, and have your X server running and set up, you can run &lt;code&gt;emacs &amp;amp;&lt;/code&gt; to spawn it, and keep it open as a background process.&lt;/p&gt;
&lt;p&gt;Happy text manipulation!&lt;/p&gt;
&lt;p&gt;P.S. I wrote this entire post in Doom Emacs, launched from WSL 2 on my home desktop and it works like a charm :)&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Dealing with multiple git hosts</title>
      <link>https://utf9k.net/blog/multiple-git-hosts/</link>
      <description>Why setting for one gitconfig when you could have two or more</description>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/multiple-git-hosts/</guid>
      <content type="html">&lt;div class=&#34;notice&#34;&gt;
  &lt;hr class=&#34;hidden&#34; /&gt;
  &lt;h3&gt;
  Some things have changed since I first wrote this&lt;/h3&gt;
&lt;p&gt;At the time of writing, I was using Gitlab so you&amp;rsquo;ll see references to my dotfiles living there.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve now moved back to Github but kept the references to Gitlab in this post intact.&lt;/p&gt;
  &lt;hr class=&#34;hidden&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;When using my work laptop, I like to keep a copy of my dotfiles so that my tools at work are in sync with my tools at home. They &lt;a href=&#34;https://github.com/marcus-crane/dotfiles&#34;&gt;live in a Github repository&lt;/a&gt; under my personal account, and I use plain old git to sync changes.&lt;/p&gt;
&lt;p&gt;In order to push and pull changes from Github, I use an SSH key rather than a password. It&amp;rsquo;s easy enough to generate one of course but I also have one for the internal repository at my work. Juggling the two can sometimes be annoying when setting up a fresh laptop without some proper configuration.&lt;/p&gt;
&lt;p&gt;Usually I forget what that looks like so here&amp;rsquo;s a quick walkthrough on how you too can juggle multiple git hosts.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at a barebones ssh configuration file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cat ~/.ssh/config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host github.example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/work
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host gitlab.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/personal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host github.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/personal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve got three different hosts and two different SSH keys.&lt;/p&gt;
&lt;p&gt;Whenever you use &lt;code&gt;ssh&lt;/code&gt;, it&amp;rsquo;ll check to see if you have any host blocks defined. If they match the host provided, it&amp;rsquo;ll use the corresponding configuration.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how it looks in action:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; ssh -T git@github.example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hi marcus! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; ssh -T git@gitlab.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Welcome to GitLab, @marcus-crane!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The connection to &lt;code&gt;github.example.com&lt;/code&gt; uses the key stored at &lt;code&gt;~/.ssh/work&lt;/code&gt;, while the connection to &lt;code&gt;gitlab.com&lt;/code&gt; has used the key stored at &lt;code&gt;~/.ssh/personal&lt;/code&gt;. Perfect!&lt;/p&gt;
&lt;p&gt;You can also add additional configuration that is specific to just one host.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example with a few more options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; cat ~/.ssh/config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host github.example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/work
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host gitlab.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/personal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LogLevel VERBOSE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host github.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  HostName notarealuser
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IdentityFile ~/.ssh/personal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s mostly the same with two new commands &lt;code&gt;LogLevel&lt;/code&gt; and &lt;code&gt;HostName&lt;/code&gt;. Let&amp;rsquo;s see it in action once again before we dive a bit deeper:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; ssh -T git@github.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh: Could not resolve hostname notarealuser: Name or service not known
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; ssh -T git@gitlab.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Authenticated to gitlab.com &lt;span style=&#34;color:#ff79c6&#34;&gt;([&lt;/span&gt;35.231.145.151&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;:22&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Welcome to GitLab, @marcus-crane!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Transferred: sent 2036, received &lt;span style=&#34;color:#bd93f9&#34;&gt;3072&lt;/span&gt; bytes, in 0.5 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bytes per second: sent 4366.6, received 6588.4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that we sent a request to &lt;code&gt;github.com&lt;/code&gt; and it interpreted the corresponding host block, attempting to log in as someone called &lt;code&gt;notarealuser&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For most git servers, the user will default to &lt;code&gt;git&lt;/code&gt; and is generally part of your remote anyway. You can see it whenever you run &lt;code&gt;git remote add origin git@github.com/user/blah&lt;/code&gt; or &lt;code&gt;git remote -v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It can be quite handy for regular servers however. Instead of connecting with &lt;code&gt;ssh user@blah.net&lt;/code&gt;, you can add the username to a host block and shorten that command down to just &lt;code&gt;ssh blah.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LogLevel&lt;/code&gt; command is fairly straight forward. You can set it to a higher level of logging, and see more details about what SSH is doing under the hood, but for a specific host.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re getting error messages from your internal git host, you could toggle on &lt;code&gt;LogLevel DEBUG&lt;/code&gt; and see if your requests are making their way to the host or not as an example.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure there&amp;rsquo;s all sorts of interesting stuff you could do but this post isn&amp;rsquo;t meant to be comprehensive by any means. It&amp;rsquo;s more of a reminder to myself on how to create an ssh config file.&lt;/p&gt;
&lt;p&gt;You can see all of the various commands offline by running &lt;code&gt;man ssh_config&lt;/code&gt;. You can also read them online via the &lt;a href=&#34;https://man.openbsd.org/ssh_config&#34;&gt;OpenBSD manual page server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy SSHing!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fixing a WSL2 VHD conversion issue</title>
      <link>https://utf9k.net/blog/wsl2-vhd-issue/</link>
      <description>One night I had a bit to drink and debugged the hell out of a WSL2 issue out of frustration</description>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/wsl2-vhd-issue/</guid>
      <content type="html">&lt;p&gt;I recently started running the Windows Insider builds on my desktop so that I could play around with the new Windows Subsystem for Linux but I ran into some trouble. Before I get into the fix, here&amp;rsquo;s a little bit of history&lt;/p&gt;

&lt;h2 id=&#34;the-history&#34;&gt;The history&lt;/h2&gt;&lt;p&gt;For the unfamiliar, it&amp;rsquo;s a way to run Linux applications inside of a Windows environment using a lightweight VM.&lt;/p&gt;
&lt;p&gt;For the familiar, you may have heard of WSL 1, which essentially translated Linux system calls into their appropriate NT kernel counterparts. The downside meant that things were kind of slow, and not everything worked as you would hope.&lt;/p&gt;
&lt;p&gt;The biggest downside was perhaps USB devices, in that there were no drivers to support them. Personally, I was unable to use the Yubikey NEO I had at the time, given that &lt;a href=&#34;https://github.com/microsoft/WSL/issues/1521&#34;&gt;smart cards had no support&lt;/a&gt;. Anyone using USB debug interfaces such as &lt;a href=&#34;https://github.com/microsoft/WSL/issues/2185&#34;&gt;JTAG&lt;/a&gt; or &lt;a href=&#34;https://github.com/microsoft/WSL/issues/2195&#34;&gt;ADB&lt;/a&gt; was out of luck too.&lt;/p&gt;
&lt;p&gt;Thankfully, this should hopefully be in the past now with the &lt;a href=&#34;https://devblogs.microsoft.com/commandline/announcing-wsl-2&#34;&gt;announcement of WSL 2&lt;/a&gt;, a virtual machine that&amp;rsquo;s supposed to be so light, it&amp;rsquo;s not like those other slow virtual machines you think of.&lt;/p&gt;

&lt;h2 id=&#34;the-fix&#34;&gt;The fix&lt;/h2&gt;&lt;p&gt;Long story short, I dove in by following the installation instructions and hit a brick wall once I got to the second step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;PS &lt;/span&gt;C:\WINDOWS\system32&amp;gt; wsl --set-version Ubuntu &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Conversion &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; progress, this may take a few minutes...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;For&lt;/span&gt; information on key differences with WSL &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; please visit https://aka.ms/wsl2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The requested operation could not be completed due to a virtual disk system limitation.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Virtual hard disk files must be uncompressed and unencrypted and must not be sparse.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Upon trying to convert my WSL distros to Version 2, they complained about a virtual disk system limitation. I actually put this on the backburner for months until coming back to it today and the fix felt dumb.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;d never know it but your WSL packages live under &lt;code&gt;%LOCALAPPDATA%/packages/&amp;lt;distro title surrounded by nonsense&amp;gt;&lt;/code&gt;. In my case, Debian lives at &lt;code&gt;C:\Users\Marcus\AppData\Local\Packages\TheDebianProject.DebianGNULinux_76v4gfsz19hv4&lt;/code&gt;. If you visit your distro&amp;rsquo;s respective folder, you&amp;rsquo;ll find no virtual disk image in sight.&lt;/p&gt;
&lt;p&gt;The terms &amp;ldquo;uncompressed and unencrypted&amp;rdquo; tipped me off to check those blasted &amp;ldquo;advanced settings&amp;rdquo;. Under &lt;code&gt;Right Click -&amp;gt; Properties -&amp;gt; General -&amp;gt; Advanced&lt;/code&gt;, I spotted &lt;code&gt;Compress contents to save disk space&lt;/code&gt; was ticked for some reason. Unchecking it, then rerunning the WSL 1 -&amp;gt; 2 conversion worked as you&amp;rsquo;d hope.&lt;/p&gt;
&lt;img src=&#34;compressed.png&#34; alt=&#34;A screenshot showing Windows Explorer. It is open to C:/Users/Marcus/AppData/Local/Packages. A folder is highlighted to indicate it was recently clicked on. The properties window for that folder is visible showing metadata. Overlaying the properties window is the Advanced Attributes window where a checkbox labelled &amp;amp;lsquo;Compress contents to save disk space&amp;amp;rsquo; is checked. The author is showing that you should uncheck that box to fix the issue described in this post.&#34;  /&gt;&lt;p&gt;So, if you run into this issue, have a poke around your packages and hopefully you&amp;rsquo;ll be on your way to a nice, properly Linux-y home on Windows.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Installing Arch Linux on my Intel NUC</title>
      <link>https://utf9k.net/blog/arch-nuc-install/</link>
      <description>My self help guide to installing Arch</description>
      <pubDate>Sun, 24 Dec 2017 00:00:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/arch-nuc-install/</guid>
      <content type="html">&lt;div class=&#34;notice&#34;&gt;
  &lt;hr class=&#34;hidden&#34; /&gt;
  &lt;h3&gt;
  ⚰️ Is this up to date?&lt;/h3&gt;
&lt;p&gt;While I used to fiddle with Arch, and other Linux distros when I was younger, I don&amp;rsquo;t run it as my daily driver nowadays.&lt;/p&gt;
&lt;p&gt;If I were to reinstall Arch Linux tomorrow, I would still dogfood my own guide and expect that it should be fairly seemless.&lt;/p&gt;
&lt;p&gt;While I don&amp;rsquo;t expect much has changed, you should know that I&amp;rsquo;m not actively verifying that these steps haven&amp;rsquo;t changed or anything like that.&lt;/p&gt;
  &lt;hr class=&#34;hidden&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s that time again where I decide to reinstall Arch Linux and likely end up bashing my head against a wall. I have an old blog post on my Github but it could be better so this is an extended version mainly for my own future reference.&lt;/p&gt;
&lt;p&gt;Please note that this isn&amp;rsquo;t some guide for pros or that I expect to have the most 100% correct or efficient method of installing. It&amp;rsquo;s just what I know works for me.&lt;/p&gt;

&lt;h2 id=&#34;getting-online&#34;&gt;Getting online&lt;/h2&gt;&lt;p&gt;As I&amp;rsquo;m installing on an Intel NUC, I&amp;rsquo;m going to assume you might like it run it mainly via WiFi so we&amp;rsquo;ll start by getting online. You can do this graphically by running &lt;code&gt;wifi-menu&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wifi-menu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you&amp;rsquo;ve set up a profile, you&amp;rsquo;ll see a new entry when using the &lt;code&gt;ifconfig&lt;/code&gt; command and you can confirm you&amp;rsquo;re online with &lt;code&gt;ping archlinux.org -c 3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-your-hard-drive&#34;&gt;Setting up your hard drive&lt;/h2&gt;&lt;p&gt;Personally, I wouldn&amp;rsquo;t, and probably couldn&amp;rsquo;t (yet) install Arch Linux as a dual boot partition. That is, alongside another operating system such as Windows or macOS. You might like to and that&amp;rsquo;s great but this isn&amp;rsquo;t the guide for you :)&lt;/p&gt;
&lt;p&gt;First, we need to see what our current devices are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fdisk -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may see a few. In my case, my hard drive has a few &lt;code&gt;/dev/sda&amp;lt;number&amp;gt;&lt;/code&gt; entries and my USB has 2 &lt;code&gt;/dev/sdb&amp;lt;number&amp;gt;&lt;/code&gt; entries. For the purposes of this guide, I&amp;rsquo;ll be assuming that your hard drive is under &lt;code&gt;/dev/sda&lt;/code&gt; but when installing to, say, a Macbook, I&amp;rsquo;ve found that the hard drive can be under &lt;code&gt;/dev/sdb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My hard drive will end up looking as follows once I&amp;rsquo;ve set it up:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SIZE&lt;/th&gt;
&lt;th&gt;PURPOSE&lt;/th&gt;
&lt;th&gt;LOCATION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;500M&lt;/td&gt;
&lt;td&gt;Boot Sector&lt;/td&gt;
&lt;td&gt;/boot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;td&gt;System Root&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8G&lt;/td&gt;
&lt;td&gt;Swap Space&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;437G&lt;/td&gt;
&lt;td&gt;Home Directory&lt;/td&gt;
&lt;td&gt;/home&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I&amp;rsquo;m targeting a &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface&#34;&gt;UEFI&lt;/a&gt; BIOS so we&amp;rsquo;ll be using &lt;a href=&#34;https://en.wikipedia.org/wiki/GUID_Partition_Table&#34;&gt;GPT&lt;/a&gt; for our partition table.&lt;/p&gt;
&lt;p&gt;The following uses &lt;a href=&#34;https://www.gnu.org/software/parted/manual/parted.html&#34;&gt;gparted&lt;/a&gt; which you may or may not be familiar with if you&amp;rsquo;ve only use GUI installers before. Just follow along and I&amp;rsquo;ll comment what each segment is roughly doing. From hereon in, URLs prefixed by a tilde (~) indicate resources where you can read further information if you&amp;rsquo;re the curious sort.&lt;/p&gt;
&lt;div class=&#34;notice&#34;&gt;
  &lt;hr class=&#34;hidden&#34; /&gt;
  &lt;h3&gt;
  &lt;span&gt;⚠️&lt;/span&gt;Consider yourself warned&lt;/h3&gt;
&lt;p&gt;The following &lt;em&gt;WILL&lt;/em&gt; wipe your hard drive so ensure that this is what you&amp;rsquo;d like to do and/or that you&amp;rsquo;ve backed up everything from any currently installed OS&lt;/p&gt;
  &lt;hr class=&#34;hidden&#34; /&gt;
&lt;/div&gt;

&lt;h2 id=&#34;partitioning&#34;&gt;Partitioning&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Launched parted, passing our hard drive as an argument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parted /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create a partition table using the GUID Partition Table (GPT) format.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# This wipes your drive(!)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mklabel gpt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create a 499M boot sector that will live at /boot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ESP is short for EFI System Partition and are always formatted as FAT32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# We start at 1MiB instead of 0 because MBR/GPT both use the first block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ~ https://unix.stackexchange.com/a/286325&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# We use 550MiB as Rod Smith reports possible bugs with ESPs below 512MiB&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ~ http://www.rodsbooks.com/efi-bootloaders/principles.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkpart ESP fat32 1MiB 551MiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Set the boot flag to ON on partition number 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ~ https://www.gnu.org/software/parted/manual/html_node/set.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; boot on
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create a 20G ext4 partition that will live at /&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkpart primary ext4 551MiB 20.5GiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create an 8G swap partition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkpart primary linux-swap 20.5GiB 28.5GiB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Allocate the remaining space which will be used by users at /home/{user}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkpart primary 28.5GiB 100%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# All done!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that are partitions are set up, running &lt;code&gt;fdisk -l&lt;/code&gt; again should show the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DEVICE&lt;/th&gt;
&lt;th&gt;FORMAT&lt;/th&gt;
&lt;th&gt;LOCATION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/dev/sda1&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;td&gt;/boot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dev/sda2&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dev/sda4&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;td&gt;/home&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;making-file-systems&#34;&gt;Making file systems&lt;/h2&gt;&lt;p&gt;We don&amp;rsquo;t need any utilites to create our file systems, we can just do &amp;rsquo;em straight outta the box like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create a 32bit VFAT filesystem for our boot partition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# VFAT is essentially FAT32 with support for longer filenames. See below for more details.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ~ http://wiki.linuxquestions.org/wiki/VFAT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ~ https://unix.stackexchange.com/a/263731&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkfs.vfat -F32 /dev/sda1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create an ext4 filesystem for our root partition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkfs.ext4 /dev/sda2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Prepare a swap area&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkswap /dev/sda3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Activate our created swap area&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;swapon /dev/sda3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create an ext4 filesystem for our home partition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkfs.ext4 /dev/sda4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that our hard drive is completely set up, we&amp;rsquo;re ready to mount our file systems.&lt;/p&gt;

&lt;h2 id=&#34;mounting-our-new-file-systems&#34;&gt;Mounting our new file systems&lt;/h2&gt;&lt;p&gt;Just as a reminder, here&amp;rsquo;s where we want our partitions to end up&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DEVICE&lt;/th&gt;
&lt;th&gt;FORMAT&lt;/th&gt;
&lt;th&gt;LOCATION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/dev/sda1&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;td&gt;/boot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dev/sda2&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dev/sda4&lt;/td&gt;
&lt;td&gt;ext4&lt;/td&gt;
&lt;td&gt;/home&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here&amp;rsquo;s how this layout translates into mount commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Mount our root partition to /mnt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# NOTE: /mnt doesn&amp;#39;t persist once we&amp;#39;re in our bash prompt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# For example, /mnt/home becomes just /home&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount /dev/sda2 /mnt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create a folder which our ESP partition will be mounted to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir /mnt/boot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Mount our ESP partition to /boot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount /dev/sda1 /mnt/boot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Create a home folder where all of our user directories will live&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir /mnt/home
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Mount the home partition to /home&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount /dev/sda4 /mnt/home
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice! We&amp;rsquo;re completely done and can start to actually install and configure Arch Linux.&lt;/p&gt;

&lt;h2 id=&#34;installing-base-packages&#34;&gt;Installing base packages&lt;/h2&gt;&lt;p&gt;Now we need to download and install the base packages for Arch Linux to our &lt;code&gt;/mnt&lt;/code&gt; which will becomes our root (&lt;code&gt;/&lt;/code&gt;) later on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pacstrap /mnt base
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the curious, the &lt;code&gt;base&lt;/code&gt; group contains a number of default libraries and utilties you may have used such as &lt;code&gt;man&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;iptables&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt; to name a few.&lt;/p&gt;
&lt;p&gt;You can view the &lt;code&gt;pacstrap&lt;/code&gt; script itself &lt;a href=&#34;https://git.archlinux.org/arch-install-scripts.git/tree/pacstrap.in&#34;&gt;here&lt;/a&gt;. I thought it would be quite longer!&lt;/p&gt;
&lt;p&gt;The script also runs the &lt;code&gt;mkinitcpio&lt;/code&gt; bash script which you can learn more about &lt;a href=&#34;https://wiki.archlinux.org/index.php/mkinitcpio#Overview&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This entire process may take a few minutes so feel free to read ahead while you wait.&lt;/p&gt;

&lt;h2 id=&#34;set-up-bash&#34;&gt;Set up bash&lt;/h2&gt;&lt;p&gt;With Arch Linux installed, we can finally move off of our live USB and start a bash process to set up our freshly initialised system after 2 more quick steps&lt;/p&gt;
&lt;p&gt;Step 1 is generating a &lt;a href=&#34;http://www.linfo.org/etc_fstab.html&#34;&gt;file systems table&lt;/a&gt;, referred to as &lt;code&gt;fstab&lt;/code&gt; going forward. This is done so that all devices (/dev/sdaX) specificied in the file are mounted automatically on startup.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;-U&lt;/code&gt; flag denotes that we want to identify our devices using &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUIDs&lt;/a&gt;, instead of labels, as noted &lt;a href=&#34;https://github.com/falconindy/arch-install-scripts/blob/master/genfstab.in#L86&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Step 2 is even quicker!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arch-chroot /mnt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;arch-chroot&lt;/code&gt;, seen &lt;a href=&#34;https://github.com/falconindy/arch-install-scripts/blob/master/arch-chroot.in&#34;&gt;here&lt;/a&gt; changes the root directory to, well, &lt;code&gt;/&lt;/code&gt; which is our new root directory. As we&amp;rsquo;re still on the live USB, we specify it as &lt;code&gt;/mnt&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arch-chroot&lt;/code&gt; is also able to take some flags following the root partition such as &lt;code&gt;arch-chroot /mnt /bin/bash&lt;/code&gt;. It&amp;rsquo;s worth noting that the preceeding example is actually fairly pointless seeing as &lt;code&gt;arch-chroot&lt;/code&gt; already defaults to &lt;code&gt;bash&lt;/code&gt; anyway.&lt;/p&gt;
&lt;p&gt;Huzzah! We&amp;rsquo;re finally in our new system but will it boot? Not quite yet and we&amp;rsquo;ve still a lot to set up so let&amp;rsquo;s carry on.&lt;/p&gt;

&lt;h2 id=&#34;updates-and-other-dependencies-optional&#34;&gt;Updates and other dependencies (optional)&lt;/h2&gt;&lt;p&gt;At this point, I like to run a system upgrade using &lt;code&gt;pacman -Syu&lt;/code&gt; just in case. As we&amp;rsquo;ve just pulled our dependencies minutes ago, it&amp;rsquo;ll likely find nothing but I reckon it feels good, haha.&lt;/p&gt;
&lt;p&gt;I also need some extra bits and pieces for later at this point. We couldn&amp;rsquo;t have fetched these earlier as trying to run &lt;code&gt;pacman&lt;/code&gt;, the Arch Linux package manager, from the live USB would attempt to install to the USB itself and error out.&lt;/p&gt;
&lt;p&gt;I need the following bits:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PACKAGE&lt;/th&gt;
&lt;th&gt;PURPOSE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://invisible-island.net/dialog/&#34;&gt;dialog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A library for console-based UIs like &lt;code&gt;wifi-menu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://downloadcenter.intel.com/search?keyword=microcode+data&#34;&gt;intel-ucode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Micro-code updates for Intel CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://w1.fi/wpa_supplicant/&#34;&gt;wpa_supplicant&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Used to connect to wireless networks (put simply)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That should be everything for now. The other bits (&lt;code&gt;netctl&lt;/code&gt; and &lt;code&gt;dhcpcd&lt;/code&gt;) were already installed as part of the &lt;code&gt;base&lt;/code&gt; group from earlier. If you&amp;rsquo;re using Ethernet, you can basically skip this entire step hence why it&amp;rsquo;s marked as optional.&lt;/p&gt;
&lt;p&gt;Honestly, we don&amp;rsquo;t really need &lt;code&gt;dialog&lt;/code&gt; as we could just use &lt;code&gt;netctl&lt;/code&gt; directly but I find it more user friendly and I&amp;rsquo;m not a masochist, haha.&lt;/p&gt;
&lt;p&gt;You might as well also enable &lt;code&gt;dhcpcd&lt;/code&gt; if you need it for ethernet with &lt;code&gt;systemctl enable dhcpcd&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;generating-locale&#34;&gt;Generating locale&lt;/h2&gt;&lt;p&gt;Popular software often ships in a number of languages but in order to show the correct language, currency and so on, it needs to know where you live. We achieve this by generating and setting a locale.&lt;/p&gt;
&lt;p&gt;To do so, edit &lt;code&gt;/etc/locale.gen&lt;/code&gt; and uncomment your respective locale. In short, the format is &lt;code&gt;{language}_{country code}.{character encoding}&lt;/code&gt;. As an example, I&amp;rsquo;m in New Zealand so I uncomment the line &lt;code&gt;en_NZ.UTF-8 UTF-8&lt;/code&gt;. If in doubt, just opt for &lt;code&gt;utf-8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I just use &lt;code&gt;nano&lt;/code&gt; but if you prefer, this would be an alright time to run &lt;code&gt;pacman -S vim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve done that, you&amp;rsquo;ll need to generate the locale files and export your language to your environment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;locale-gen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;={&lt;/span&gt;xx&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;_&lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;yy&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;.UTF-8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If done successfully, &lt;code&gt;echo $LANG&lt;/code&gt; will display your locale.&lt;/p&gt;
&lt;p&gt;For reference, the actual &lt;code&gt;locale-gen&lt;/code&gt; script can be seen &lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=blob;f=localedata/gen-locale.sh;h=39f1475cbc45faaae32728dbfd7cce282c3cdb05;hb=HEAD&#34;&gt;here&lt;/a&gt; as part of &lt;a href=&#34;https://sourceware.org/git/?p=glibc.git;a=summary&#34;&gt;glibc&lt;/a&gt;, the GNU implementation of the C standard library. I always wondered where it was from!&lt;/p&gt;

&lt;h2 id=&#34;timezone&#34;&gt;Timezone&lt;/h2&gt;&lt;p&gt;Selecting our timezone is fairly straightforward thanks to an interactive program called &lt;code&gt;tzselect&lt;/code&gt;. Running it will show a list of continents and oceans. Selecting one will drill down to display countries.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve confirmed the output, it will mention appending the timezone to a file. Instead, we want to symlink that timezone to a file. In my case, the timezone is &lt;code&gt;Pacific/Auckland&lt;/code&gt; but of course, you&amp;rsquo;ll want to input your respective timezone instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ln -s /usr/share/zoneinfo/Pacific/Auckland /etc/localtime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;setting-hardware-clock&#34;&gt;Setting hardware clock&lt;/h2&gt;&lt;p&gt;The last of our locale related setups is configuring the system clock. To do that, we&amp;rsquo;ll tell our hardware clock to set the system time using the &lt;code&gt;--hctosys&lt;/code&gt; option. You can read more about &lt;code&gt;hwclock&lt;/code&gt; and how it differs from system time &lt;a href=&#34;https://linux.die.net/man/8/hwclock&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hwclock --systohc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;hostname-setup&#34;&gt;Hostname setup&lt;/h2&gt;&lt;p&gt;We like life to be simple (but no simpler) and giving our computer/server a unique name is an important part of that process. For this bit, let&amp;rsquo;s assume we want to name our system &lt;code&gt;weinerdog&lt;/code&gt; because it sounds silly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; weinerdog &amp;gt; /etc/hostname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Oh, that was easy. We also need to tell our system that &lt;code&gt;weinerdog&lt;/code&gt; is an alias for &lt;code&gt;127.0.0.1&lt;/code&gt;, just like &lt;code&gt;localhost&lt;/code&gt; is. We could fire up our favourite editor but it&amp;rsquo;s likely &lt;code&gt;/etc/hosts&lt;/code&gt; is empty so just do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; 127.0.0.1 localhost weinerdog &amp;gt; /etc/hosts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How quick was that, huh?&lt;/p&gt;

&lt;h2 id=&#34;set-a-root-password&#34;&gt;Set a root password&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ll be using this password to login, which I sometimes forget. It should be different than the password for the user account we&amp;rsquo;ll be making soon but I&amp;rsquo;d be lying if I said I have a super secure password. You have bigger problems if you think this writeup will give you top notch security anyway. I&amp;rsquo;m just here for a usable system!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just type in your password twice. Not much more to it than that.&lt;/p&gt;

&lt;h2 id=&#34;installing-a-boot-manager&#34;&gt;Installing a boot manager&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ll be using &lt;code&gt;systemd-boot&lt;/code&gt; as our EFI boot manager. I couldn&amp;rsquo;t tell you anything about it other than it works and that&amp;rsquo;s good enough.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bootctl --path&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/boot install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command copies the &lt;code&gt;systemd-boot&lt;/code&gt; binary to our EFI System Partition (&lt;code&gt;/boot&lt;/code&gt;) and adds it as the default EFI application to be loaded as stated &lt;a href=&#34;https://wiki.archlinux.org/index.php/systemd-boot#EFI_boot&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuring-the-boot-manager&#34;&gt;Configuring the boot manager&lt;/h2&gt;&lt;p&gt;Now that we have a boot manager, we need to tell it what to boot exactly. We&amp;rsquo;ll create a new &lt;code&gt;arch.conf&lt;/code&gt; entry using &lt;code&gt;nano&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano /boot/loader/entries/arch.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and enter the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;title Arch Linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linux /vmlinuz-linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initrd /intel-ucode.img
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initrd /initramfs-linux.img
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/dev/sda2 rw &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;elevator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;deadline quiet splash &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;resume&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/dev/sda3 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;nmi_watchdog&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The line &lt;code&gt;initrd /intel-ucode.img&lt;/code&gt; &lt;strong&gt;ONLY&lt;/strong&gt; applies if you installed the &lt;code&gt;intel-ucode&lt;/code&gt; package from earlier which anyone with an Intel CPU should do.&lt;/p&gt;
&lt;p&gt;As for the options, I couldn&amp;rsquo;t say if you need, or don&amp;rsquo;t need, any of them but it&amp;rsquo;s worked fine for me so far. I&amp;rsquo;ll probably read up on them in depth shortly and update this post as required.&lt;/p&gt;
&lt;p&gt;Once that&amp;rsquo;s created, set it as the default configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default arch&amp;#34;&lt;/span&gt; &amp;gt; /boot/loader/loader.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and now you&amp;rsquo;re ready to reboot into a nicely working system!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve still got a lot to learn about Arch Linux but so far, the above setup has worked well for me.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s still more that goes into a system but this is enough to get past the pesky initial setup which gave me hours upon hours of grief as a beginner, which I still am essentially.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
