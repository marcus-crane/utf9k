<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>utf9k</title>
    <link>https://utf9k.net/tags/configuration/</link>
    <description>Posts from utf9k</description>
    <language>en</language>
    <author>
      <name>Marcus Crane</name>
      <email>marcus@utf9k.net</email>
    </author>
    <lastBuildDate>Wed, 17 Feb 2021 18:14:00 +1300</lastBuildDate>
    
	<atom:link href="https://utf9k.net/tags/configuration/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FAQ driven configuration</title>
      <link>https://utf9k.net/blog/faq-driven-configuration/</link>
      <description>Not sure how to structure a config file? Try answering questions rather than trying to come up with categories</description>
      <pubDate>Wed, 17 Feb 2021 18:14:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/faq-driven-configuration/</guid>
      <content type="html">&lt;p&gt;I&amp;rsquo;m sure this idea isn&amp;rsquo;t new in the slightest but a handy trick I&amp;rsquo;ve been using is to define configuration as a series of questions, not unlike a FAQ.&lt;/p&gt;
&lt;p&gt;Rather than explain it, &lt;a href=&#34;https://github.com/marcus-crane/dotfiles/blob/62813e09dc6d5127b0f25a5017ae23fd37ce180f/doom/.doom.d/config.org&#34;&gt;here&lt;/a&gt; is an example of a configuration file I&amp;rsquo;ve structured this way.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a little light on detail because I&amp;rsquo;ve been too lazy to flesh it out with extra context, but even in spite of that I think it&amp;rsquo;s easier to navigate thanks to the structure.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s take a closer look at one of those blocks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;***&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;would&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;like&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;see&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;inside&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Emacs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Displaying&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bottom&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;seems&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;like&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;good&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;idea&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;display-time-mode&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t worry about the &lt;a href=&#34;https://en.wikipedia.org/wiki/Emacs_Lisp&#34;&gt;elisp&lt;/a&gt; syntax going on here. The actual code used is besides the point.&lt;/p&gt;
&lt;p&gt;First, we set up a question. It&amp;rsquo;s well scoped to asking just one thing: &amp;ldquo;How can we see the time while inside Emacs?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The answer, &lt;code&gt;(display-time-mode 1)&lt;/code&gt;, is pretty short in this case but it could span multiple lines. Regardless, we can safely assume that there isn&amp;rsquo;t going to be some configuration related to checking email tucked away in there.&lt;/p&gt;

&lt;h2 id=&#34;a-slightly-more-complex-example&#34;&gt;A slightly more complex example&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ll be the first to admit that &lt;a href=&#34;https://github.com/marcus-crane/dotfiles&#34;&gt;my own dotfiles&lt;/a&gt; are a complete mess at the best of times but thankfully that means I have some examples of how this tip can be used to add some more structured.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at &lt;a href=&#34;https://github.com/marcus-crane/dotfiles/blob/f14b4ebf86e41fa9cad3630355364eada11482f1/doom/.doom.d/config.org#setting-org-file-locations&#34;&gt;an older version&lt;/a&gt; of my Doom Emacs configuration. I only pick Emacs because most of my other dotfiles aren&amp;rsquo;t very long.&lt;/p&gt;
&lt;p&gt;We can distill the linked section down to something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;***&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Setting&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;locations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;after!&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;inbox.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gtd.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tickler.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dropbox-cal&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;events.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dropbox-cal&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;events-inbox.org&amp;#34;&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;after!&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-archive-location&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;archive/archive-&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#50fa7b&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%Y%m&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#50fa7b&#34;&gt;current-time&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.org::&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve reduced the indentation a little for pure readability within this blog post but having &amp;ldquo;archive/archive-&amp;rdquo; on a new line may or may not be valid.&lt;/p&gt;
&lt;p&gt;Anyway, here we have a generic section called &amp;ldquo;Setting org file locations&amp;rdquo;. Is that telling Emacs to set or create files in those locations? What does the second block have to do with that?&lt;/p&gt;
&lt;p&gt;While this works, the block is quite expansive (not helped by my excessive wall of text) and at first glance, it&amp;rsquo;s not hugely clear if both of these blocks are needed. In reality, only the first one is actually &amp;ldquo;Setting org file locations&amp;rdquo; and even then, it isn&amp;rsquo;t setting anything so much as determining where to look for files.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s look at &lt;a href=&#34;https://github.com/marcus-crane/dotfiles/blob/6b6763a385b842b9dbdc3c883fe8bd0f13df60f2/doom/.doom.d/config.org#setting-up&#34;&gt;a later version&lt;/a&gt; of the same file.&lt;/p&gt;
&lt;p&gt;While the configuration has changed a bit, I&amp;rsquo;ll be reducing it to just the blocks we see above for a side by side comparison&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Setting&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;***&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Where&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;live?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;after!&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;inbox.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gtd.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tickler.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dropbox-cal&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;events.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dropbox-cal&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;events-inbox.org&amp;#34;&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;***&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;What&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;shall&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;completed&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;tasks?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;after!&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-archive-location&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#50fa7b&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;org-agenda-directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;archive/archive-&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#50fa7b&#34;&gt;format-time-string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%Y%m&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#50fa7b&#34;&gt;current-time&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.org::&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we have exactly the same configuration, but split into two separate questions. While the actual &amp;ldquo;answers&amp;rdquo; may not be parseable at first glance for anyone unaffiliated with Emacs, the questions (or heading) give a nice, concise English description of what&amp;rsquo;s going on here, without actually telling you anything about the code specifically.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also a lot easier, in my opinion, to visually parse as the blocks are split up into nice, small sections and they lend themselves better to navigating via a table of contents.&lt;/p&gt;

&lt;h2 id=&#34;defending-your-configuration-through-time&#34;&gt;Defending your configuration through time&lt;/h2&gt;&lt;p&gt;Perhaps one of my favourite aspects, which I only got to experience just recently, is that posing your configuration as a series of questions means that changing the &amp;ldquo;answers&amp;rdquo; doesn&amp;rsquo;t specifically mean you have to restructure your configuration file.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s look at an example of how you might normally specify a configuration section. In this case, we&amp;rsquo;re setting an environment variable that points to a Dropbox folder.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Setting&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;up&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Dropbox&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dropbox&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;getenv&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DROPBOX_DIR&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s say we get fed up with Dropbox and decide to move entirely to our own WebDav server. Here&amp;rsquo;s how much we might naively change.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f55&#34;&gt;-** Setting up Dropbox
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f55&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b;font-weight:bold&#34;&gt;+** Setting up WebDav
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f55&#34;&gt;-(setq dropbox (getenv &amp;#34;DROPBOX_DIR&amp;#34;))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f55&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b;font-weight:bold&#34;&gt;+(setq webdav (getenv &amp;#34;WEBDAV_DIR&amp;#34;))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the past, I&amp;rsquo;ve probably done this many times, as I move around software. For a little while, my Emacs configuration has been scoped nicer to look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs&#34; data-lang=&#34;emacs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Where&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;my&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;files?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;storage&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;~/Dropbox&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and when it came time to make some changes, I didn&amp;rsquo;t have to touch my original &amp;ldquo;question&amp;rdquo; at all.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** Where do I store my files?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f55&#34;&gt;-(setq storage &amp;#34;~/Dropbox&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f55&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b;font-weight:bold&#34;&gt;+(setq storage &amp;#34;~/SomewhereElse&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s really no different than the principles of encapsulation and what not and I&amp;rsquo;ve found it really handy to keep in mind over time.&lt;/p&gt;

&lt;h2 id=&#34;structuring-your-configuration&#34;&gt;Structuring your configuration&lt;/h2&gt;&lt;p&gt;Perhaps above all, I&amp;rsquo;ve just found that it reduces the amount of effort I have to put into configuration mentally.&lt;/p&gt;
&lt;p&gt;I could easily dump it all into one file without trouble but that just becomes a tangled nest over time.&lt;/p&gt;
&lt;p&gt;On the opposite end of the scale, I used to aspire to provide a lengthy detailed explainer, &lt;a href=&#34;https://tecosaur.github.io/emacs-config/config.html&#34;&gt;in the vein of Tecosaur&lt;/a&gt;, only to struggle to come up with well scoped sections.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s too easy to let the flag for &amp;ldquo;Following symlinks&amp;rdquo; live in the same section as the actual config for &amp;ldquo;Here&amp;rsquo;s where my files live&amp;rdquo; because they&amp;rsquo;re sorta related but also one has a wider scope of effect than the other.&lt;/p&gt;
&lt;p&gt;The beauty of this method is there&amp;rsquo;s no thinking at all. You often quickly realise whether something is bleeding outside of the scope of the configuration and so perhaps it&amp;rsquo;s time to pose a new question.&lt;/p&gt;
&lt;p&gt;That and it&amp;rsquo;s just less mentally taxing to read in my opinion. With a nicely formed, FAQ style configuration file,&lt;/p&gt;

&lt;h2 id=&#34;is-this-strictly-scoped-to-literate-configuration&#34;&gt;Is this strictly scoped to literate configuration?&lt;/h2&gt;&lt;p&gt;Not at all! While I&amp;rsquo;m a fan of &lt;a href=&#34;https://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; for literate configuration, despite my &lt;a href=&#34;https://utf9k.net/blog/emacs-probably-isnt-right-for-me/&#34;&gt;recent struggles with its parent&lt;/a&gt;, you can achieve this with presumably any configuration files that support comments.&lt;/p&gt;
&lt;p&gt;While I infrequently touch most of my dotfiles, I took a crack at converting my small &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt; configuration to follow this style, as viewable &lt;a href=&#34;https://github.com/marcus-crane/dotfiles/blob/37840b8/nvim/.config/nvim/init.vim&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As someone still relatively new, I actually find it handy given I&amp;rsquo;ve long forgotten what lives in there and most of it looks like gibberish to me at this point in time.&lt;/p&gt;

&lt;h2 id=&#34;one-extra-hypothetical-benefit&#34;&gt;One extra, hypothetical benefit&lt;/h2&gt;&lt;p&gt;An unintended consequence of this layout, which may be a stretch to claim as I haven&amp;rsquo;t made use of it myself, is that it can potentially lend itself quite well to search.&lt;/p&gt;
&lt;img src=&#34;search.png&#34; alt=&#34;A screenshot of Github code search. The author has typed &amp;amp;ldquo;what is listening on a port&amp;amp;rdquo; into the code search against their dotfiles and found a matching file. The match isn&amp;amp;rsquo;t exactly what they typed in but close enough as if to suggest that searching for questions you&amp;amp;rsquo;ve previously answered may be easier with this method.&#34;  /&gt;&lt;p&gt;In this case, I remembered the essence of the question, but not the specific wording of the question itself. Likewise, I wouldn&amp;rsquo;t remember to search for &lt;code&gt;lsof&lt;/code&gt; so in this entirely staged example, there is possibly potential for having an easier time searching.&lt;/p&gt;
&lt;p&gt;At worst, the structure makes for an easier time parsing when you want to answer someone&amp;rsquo;s question by linking them a pseudo-question answer session that lives within your configuration.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;mailto:hello@utf9k.net&#34;&gt;Let me know&lt;/a&gt; if you end up making use of it, or if you already do! I&amp;rsquo;ve been meaning to move more of my setup into sometihng similar so perhaps I&amp;rsquo;ll do a status report down the line.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I often do this as Dropbox might live at &lt;code&gt;~/marcus/Dropbox&lt;/code&gt; on one computer while living at &lt;code&gt;/mnt/c/Users/marcus/Dropbox&lt;/code&gt; on another. The latter would be if I wanted to access my Dropbox from within &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/about&#34;&gt;WSL&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>Configuration magic</title>
      <link>https://utf9k.net/blog/configuration-magic/</link>
      <description>Configuration is great! Magic... not so much!</description>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +1300</pubDate>
      <author><name>Marcus Crane</name></author>
      <guid>https://utf9k.net/blog/configuration-magic/</guid>
      <content type="html">&lt;p&gt;I don&amp;rsquo;t consider myself qualified enough to write much on the art of programming but I think this is probably the closest I&amp;rsquo;ve ever found myself.&lt;/p&gt;

&lt;h2 id=&#34;the-situation&#34;&gt;The situation&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m currently looking at a repo for controlling infrastructure which is comprised of a lot of &lt;code&gt;yaml&lt;/code&gt; files, and the documentation was a bit sparse, at least as far as I can see.&lt;/p&gt;
&lt;p&gt;While the specifics of the domain don&amp;rsquo;t really matter too much, the repository mainly defines a lot of compute resources.&lt;/p&gt;
&lt;p&gt;In order to make it easier to visualise, here&amp;rsquo;s an example that roughly shows how it&amp;rsquo;s laid out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; tree Resources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Resources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── teamA.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── teamB.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── staging
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── teamB.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── production
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── teamA.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── teamB.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── teamC.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each team has a &lt;code&gt;yaml&lt;/code&gt; file per environment and each file defines a variety of resources such as databases, caches and so on.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look inside a file to see an example. Once again, I&amp;rsquo;m using entirely made up values but the idea is roughly the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; less Resources/test/teamA.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;MySQL&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	- &lt;span style=&#34;color:#ff79c6&#34;&gt;Name&lt;/span&gt;: my-sturdy-database
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#ff79c6&#34;&gt;Group&lt;/span&gt;: TestResources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#ff79c6&#34;&gt;Resource&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  	&lt;span style=&#34;color:#ff79c6&#34;&gt;Size&lt;/span&gt;: PrettyBig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;Purpose&lt;/span&gt;: EatingMemory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;Replicas&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;Varnish&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	- &lt;span style=&#34;color:#ff79c6&#34;&gt;Name&lt;/span&gt;: cache-me-up-scotty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#ff79c6&#34;&gt;Group&lt;/span&gt;: TestResources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#ff79c6&#34;&gt;Resource&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  	&lt;span style=&#34;color:#ff79c6&#34;&gt;Size&lt;/span&gt;: ModeratelyBeefy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I should note that we use neither &lt;code&gt;MySQL&lt;/code&gt; or &lt;code&gt;Varnish&lt;/code&gt; (to my knowledge) as they&amp;rsquo;re just made up examples.&lt;/p&gt;
&lt;p&gt;Amongst that lot were also cloud resources and other things defined but the point is that there seemed to some sort of structure?&lt;/p&gt;
&lt;p&gt;As far as how I actually define anything, I have no idea.&lt;/p&gt;
&lt;p&gt;Surely, I can&amp;rsquo;t just arbitrarily define a &amp;ldquo;Hadoop&amp;rdquo; block and get a &lt;a href=&#34;https://www.chrisstucchio.com/blog/2013/hadoop_hatred.html&#34;&gt;Hadoop cluster&lt;/a&gt; out of thin air, that would be ridiculous!&lt;/p&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it? With no information to prove (or disprove) the idea that maybe it just magically works, I was reminded of an aspect of storytelling.&lt;/p&gt;

&lt;h2 id=&#34;fictional-worldbuilding&#34;&gt;Fictional worldbuilding&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;m not a writer by any stretch of the imagination but quite some time ago, I must&amp;rsquo;ve have been binging some videos on storytelling.&lt;/p&gt;
&lt;p&gt;I vaguely remember this idea that when creating a fiction world, you should &lt;a href=&#34;https://kidlit.com/breaking-the-rules-in-world-building/&#34;&gt;introduce the rules of the world&lt;/a&gt; as early as possible.&lt;/p&gt;
&lt;p&gt;I believe it&amp;rsquo;s best done within the first 15 minutes for a film but I had a hard time finding anything to back up that claim, although it seems sensible enough.&lt;/p&gt;
&lt;p&gt;The idea is that without rules to define your fictional world, anything and everything is possible. How can you have any sense of dramatic tension when your character could just arbitrarily become a superhuman when the story requires.&lt;/p&gt;
&lt;p&gt;Anyway, seeing that infrastructure repo reminded me of that, as the &amp;ldquo;rules&amp;rdquo; of what is possible aren&amp;rsquo;t clear.&lt;/p&gt;
&lt;p&gt;Just to be clear as well, I&amp;rsquo;d say this is only really a side effect of when someone creates their own language of sorts.&lt;/p&gt;

&lt;h2 id=&#34;is-text-a-good-interface&#34;&gt;Is text a good interface?&lt;/h2&gt;&lt;p&gt;To a developer or maintainer who is familiar with the repo in question, the idea that none of the above is completely obvious would probably make them laugh quite a bit.&lt;/p&gt;
&lt;p&gt;There is no such thing as magic when it comes to writing code, in so much as there are only more layers of code below the iceberg tip you&amp;rsquo;re currently staring at.&lt;/p&gt;
&lt;p&gt;It only makes sense that there is machinery tucked away somewhere, likely a handful of scripts, which are parsing these files.&lt;/p&gt;
&lt;p&gt;After a bit of poking around, and some question asking, it turns out each of the keys defined are matched against a supplied template, and those parameters are baked into the template. The resulting output is then submitted to our cloud provider and creates/updates the defined resource.&lt;/p&gt;
&lt;p&gt;At this point, one could argue that the entire idea of creating an abstraction through yaml files has mostly broken down the second a user needs to poke behind the curtain.&lt;/p&gt;
&lt;p&gt;In a cruel twist of irony, some of those templates were actually deleted and so the keys supplied such as &lt;code&gt;MySQL&lt;/code&gt; in our mock example, were doing nothing at all. You&amp;rsquo;d have no idea however because text can&amp;rsquo;t really provide you feedback as a user like, say, a language with a linter might tell you about an unused variable.&lt;/p&gt;
&lt;p&gt;To be entirely clear, I have these same issues with most any &lt;code&gt;yaml&lt;/code&gt; based format such as a Helm but I guess Helm has the begrudgingly awarded +1 of IDE support. Without it, I&amp;rsquo;d be tearing my hair out just as much.&lt;/p&gt;

&lt;h2 id=&#34;whats-the-lesson-here&#34;&gt;What&amp;rsquo;s the lesson here&lt;/h2&gt;&lt;p&gt;Well, I don&amp;rsquo;t really have the vocabulary to do any meaningful criticisms or suggestions here. Once I get used to the repo in question, I&amp;rsquo;m sure I&amp;rsquo;ll never think about it again and the cycle will repeat once more for whoever comes along next.&lt;/p&gt;
&lt;p&gt;Looking back, I must have missed something because there is a bit of documentation but still, it&amp;rsquo;s fairly on explanation.&lt;/p&gt;
&lt;p&gt;Most of the setup follows convention over configuration but it sort of assumes you just know the convention too.&lt;/p&gt;
&lt;p&gt;I suppose to an extent, it&amp;rsquo;s just to do with my lack of familiarity with our provider having only been a few months in.&lt;/p&gt;
&lt;p&gt;What I mainly wanted to capture was the feeling that arose from a lack of seeing a clear rule set. Not unlike a fictional rule set, without one, you&amp;rsquo;re sort of left to infer the boundaries of the situation you&amp;rsquo;re currently in.&lt;/p&gt;
&lt;p&gt;I think at its core though, I don&amp;rsquo;t like using text or configuration files for programmatic things, as there isn&amp;rsquo;t a whole heap of feedback until you apply said file?&lt;/p&gt;
&lt;p&gt;If I had to pick something that seems like a nice alternative, perhaps &lt;a href=&#34;https://www.pulumi.com/product/#sdk&#34;&gt;Pulumi&lt;/a&gt;? I can&amp;rsquo;t say I&amp;rsquo;ve really used it but on paper, it sounds kind of appealing.&lt;/p&gt;
&lt;p&gt;Well, in so much as infrastructure is appealing which some days I&amp;rsquo;d rather just have a nap to be honest.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
